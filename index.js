const
    mongoose = require("mongoose"),
    VkBot = require('node-vk-bot-api'),
    Scene = require('node-vk-bot-api/lib/scene'),
    Session = require('node-vk-bot-api/lib/session'),
    Stage = require('node-vk-bot-api/lib/stage'),
    Markup = require('node-vk-bot-api/lib/markup'),
    config = require('config'),
    bot = new VkBot(config.get("TOKEN")),
    {
        renderLessons,
        formMessage,
        isAdmin,
        renderAdminKeyBoard,
        renderAdminMenu
    } = require("./utils/messagePayloading.js"),
    botCommands = require("./utils/botCommands.js"),
    {DataBase} = require("./DataBase/DataBase.js");

mongoose.connect("mongodb+srv://Damir:CLv4QEJJrfZp4BC0@botdata-sp9px.mongodb.net/prod?retryWrites=true&w=majority", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useCreateIndex: true
}, () => console.log("Mongoose connected"));

const adminPanelScene = new Scene('adminPanel',
    (ctx) => {
        if (isAdmin(ctx.message.user_id)) {
            ctx.scene.next();
            ctx.reply(renderAdminMenu());
        } else {
            ctx.scene.leave();
            ctx.reply("–¢—ã –Ω–µ –∞–¥–º–∏–Ω —á—Ç–æ–± —Ç–∞–∫–æ–µ –¥–µ–ª–∞—Ç—å")
        }
    },
    (ctx) => {
        switch (ctx.message.body) {
            case "4": {
                ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞");
                ctx.scene.enter("createClass");
                break;
            }
            default: {
                ctx.reply("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ");
                break;
            }
        }
    },
);

const createClassScene = new Scene('createClass',
    (ctx) => {
        ctx.scene.next();
        ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∞—Å—Å–∞, —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π , –±—É–∫–≤–æ–π (A - A, –ë - B, –í - V ...)");
    },
    (ctx) => {
        const {message: {body}, scene: {leave, enter}} = ctx;
        const spacelessClassName = body.replace(/\s*/g, "");
        if (/\d+[a-z]/i.test(spacelessClassName)) {
            DataBase.createClass(spacelessClassName)
                .then(result => {
                    if (result) {
                        leave();
                        ctx.reply("–ö–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
                    } else {
                        ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å üò≠");
                    } //–∏—Å–ø—Ä–∞–≤–∏—Ç—å (–≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é\–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç–∞—Ä—Ç –≤ —Å—Ü–µ–Ω—É\–µ—â–µ —á—Ç–æ —Ç–æ)
                })
                .catch(err => {
                    console.log(err);
                    ctx.reply("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                })
        } else {
            enter("createClass");
            ctx.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞ –∏ –ø–æ—Ç–æ–º –±—É–∫–≤–∞)");
        }
    },
);

const session = new Session();
const stage = new Stage(adminPanelScene,createClassScene);

bot.use(session.middleware());
bot.use(stage.middleware());

bot.command("start", (ctx) => {
    const {message: {user_id}} = ctx;
    let buttons = [
        [
            Markup.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∑", "primary")
        ]
    ];
    if (isAdmin(user_id)) {
        buttons = renderAdminKeyBoard(buttons)
    }

    ctx.reply("Sup", null, Markup
        .keyboard(buttons)
    )
});

bot.command(botCommands.adminPanel, (ctx) => ctx.scene.enter('adminPanel'));

bot.command(/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ/i, (ctx) => {
    try {
        ctx.reply(formMessage("–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É", renderLessons()));
    } catch (e) {
        console.error(e);
    }
});
bot.command(/–¥–∑/i, (ctx) => {
    ctx.reply("–î–∑ –Ω–µ –±—É–¥–µ—Ç (–±–æ—Ç –ø—Ä–∏–Ω—è–ª –∏—Å–ª–∞–º)")
});

bot.startPolling();

