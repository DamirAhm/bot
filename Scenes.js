const
    Scene = require( 'node-vk-bot-api/lib/scene' ),
    VkBot = require( 'node-vk-bot-api' ),
    Session = require( 'node-vk-bot-api/lib/session' ),
    config = require( 'config' ),
    {
        isAdmin,
        renderAdminMenu,
        renderAdminMenuKeyboard,
        renderAdminKeyboard,
        createDefaultKeyboard,
        createBackKeyboard,
        createDefaultMenu
    } = require( "./utils/messagePayloading.js" ),
    { DataBase: DB } = require( "./DataBase/DataBase.js" );
const botCommands = require( "./utils/botCommands.js" );
const { Roles } = require( "./DataBase/Models/utils.js" );

const DataBase = new DB( config.get( "MONGODB_URI" ) );

module.exports.errorScene = new Scene( "error",
    ( ctx ) => {
        ctx.reply( "–ü—Ä–æ—Å—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", null, createDefaultKeyboard( true ) );
    }
)

module.exports.startScene = new Scene( "start",
    ( ctx ) => {
        ctx.reply( `–ü—Ä–∏–≤–µ—Ç ${ctx.session.firstName} ${ctx.session.secondName}`, null, createDefaultKeyboard( ctx.session.isAdmin ) );
        ctx.scene.enter( "default" );
    }
)

module.exports.defaultScene = new Scene( "default",
    async ( ctx ) => {
        try {
            ctx.scene.next();
            if ( ctx.session.userId ) {
                ctx.reply( createDefaultMenu(), null, createDefaultKeyboard( ctx.session.isAdmin ) );
            } else {
                const student = await DataBase.getStudentByVkId( ctx.message.user_id );

                if ( student ) {
                    ctx.reply( createDefaultMenu(), null, createDefaultKeyboard( student.role === Roles.admin ) );
                } else {
                    ctx.scene.enter( "start" );
                }
            }
        } catch ( e ) {
            ctx.scene.enter( "error" );
            console.error( e );
        }
    },
    ( ctx ) => {
        switch ( ctx.message.body.trim() ) {
            case botCommands.adminPanel: {
                ctx.scene.enter( 'adminPanel' );
                break;
            }
            case botCommands.checkHomework: {
                ctx.scene.enter( 'default' );
                ctx.reply( "–î–∑ –Ω–µ –±—É–∏—Ç" )
            }
        }
    }
)

module.exports.registerScene = new Scene( "register",
    async ( ctx ) => {
        const { scene: { next, leave } } = ctx;
        const { userId } = ctx.session;

        let Student = await DataBase.getStudentByVkId( userId );

        if ( !Student ) {
            Student = await DataBase.createStudent( userId );
        }

        if ( Student.registered ) {
            leave();
            ctx.reply( "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã" )
        } else {
            next();
            ctx.reply( "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∞—Å—Å–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É—á–∏—Ç–µ—Å—å" );
        }
    },
    async ( ctx ) => {
        const { message: { body }, scene: { leave, enter } } = ctx;
        const { userId } = ctx.session;

        const spacelessClassName = body.replace( /\s*/g, "" );
        if ( /\d+([a-z]|[–∞-—è])/i.test( spacelessClassName ) ) {
            const Class = await DataBase.getClassByName( spacelessClassName );
            const Student = await DataBase.getStudentByVkId( userId );

            await Student.updateOne( { registered: true } );
            await Student.save();

            if ( Class ) {
                await DataBase.addStudentToClass( userId, spacelessClassName );
                leave();
                ctx.reply( "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã" );
            } else {
                const Class = await DataBase.createClass( spacelessClassName );
                if ( Class ) {
                    await DataBase.addStudentToClass( userId, spacelessClassName );
                    leave();
                    ctx.reply( "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã" );
                }
            }
        } else {
            enter( "register" );
            ctx.reply( "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞" );
        }
    }
)

module.exports.adminPanelScene = new Scene( 'adminPanel',
    ( ctx ) => {
        if ( isAdmin( ctx.message.user_id ) ) {
            ctx.scene.next();
            ctx.reply( renderAdminMenu(), null, renderAdminMenuKeyboard() );
        } else {
            ctx.scene.leave();
            ctx.reply( "–¢—ã –Ω–µ –∞–¥–º–∏–Ω —á—Ç–æ–± —Ç–∞–∫–æ–µ –¥–µ–ª–∞—Ç—å" )
        }
    },
    async ( ctx ) => {
        try {
            if ( [ "0", botCommands.back ].includes( ctx.message.body.trim() ) ) {
                ctx.scene.enter( "default" );
            }

            switch ( ctx.message.body.trim() ) {
                case "1": { }
                case "2": { }
                case "3": { }
                case "4": {
                    ctx.scene.enter( "createClass" );
                    break;
                }
                case "5": {
                    const Classes = await DataBase.getAllClasses();

                    const classesStr = Classes.map( ( { name }, i ) => `${i + 1}. ${name}` ).join( "\n\t" );

                    const message = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤\n\t" + classesStr;

                    ctx.reply( message, null, createDefaultKeyboard( true ) );
                }
                case "6": { }
                default: {
                    ctx.reply( "–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ" );
                    break;
                }
            }
        } catch ( e ) {
            ctx.scene.leave();
            ctx.reply( "–ü—Ä–æ—Å—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", null, createDefaultKeyboard( true ) );
            console.error( e );
        }
    },
);

module.exports.createClassScene = new Scene( 'createClass',
    ( ctx ) => {
        ctx.reply( "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∞—Å—Å–∞ (—Ü–∏—Ñ—Ä–∞ –±—É–∫–≤–∞)", null, createBackKeyboard() );
        ctx.scene.next();
    },
    ( ctx ) => {
        if ( ctx.message.body.trim() === botCommands.back ) {
            ctx.scene.enter( "default" );
        }
        const { message: { body }, scene: { leave, enter } } = ctx;
        const spacelessClassName = body.replace( /\s*/g, "" );
        if ( /\d+([a-z]|[–∞-—è])/i.test( spacelessClassName ) ) {
            DataBase.createClass( spacelessClassName )
                .then( result => {
                    if ( result ) {
                        leave();
                        ctx.reply( "–ö–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" );
                    } else {
                        ctx.reply( "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å üò≠" );
                    } //–∏—Å–ø—Ä–∞–≤–∏—Ç—å (–≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é\–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å—Ç–∞—Ä—Ç –≤ —Å—Ü–µ–Ω—É\–µ—â–µ —á—Ç–æ —Ç–æ)
                } )
                .catch( err => {
                    console.log( err );
                    ctx.reply( "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ" )
                } )
        } else {
            enter( "createClass" );
            ctx.reply( "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞ –∏ –ø–æ—Ç–æ–º –±—É–∫–≤–∞)" );
        }
    },
);

